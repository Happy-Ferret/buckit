#!/usr/bin/env python3
import os
import tarfile
import tempfile
import unittest

from contextlib import contextmanager
from items import (
    TarballItem, CopyFileItem, MakeDirsItem, ParentLayerItem,
    FilesystemRootItem,
)
from provides import ProvidesDirectory, ProvidesFile
from requires import require_directory


DEFAULT_STAT_OPTS = '--user=root --group=root --mode=0755'


class ItemsTestCase(unittest.TestCase):

    def _check_item(self, i, provides, requires, subcommand):
        self.assertEqual(provides, set(i.provides()))
        self.assertEqual(requires, set(i.requires()))
        self.assertEqual(subcommand, i.build_subcommand())

    def test_filesystem_root(self):
        self._check_item(
            FilesystemRootItem(from_target='t'),
            {ProvidesDirectory(path='/')},
            set(),
            '',
        )

    def test_copy_file(self):
        self._check_item(
            CopyFileItem(from_target='t', source='a/b/c', dest='d/'),
            {ProvidesFile(path='d/c')},
            {require_directory('d')},
            f'copy-file {DEFAULT_STAT_OPTS} a/b/c d/',
        )
        self._check_item(
            CopyFileItem(from_target='t', source='a/b/c', dest='d'),
            {ProvidesFile(path='d')},
            {require_directory('/')},
            f'copy-file {DEFAULT_STAT_OPTS} a/b/c d',
        )

    def test_make_dirs(self):
        self._check_item(
            MakeDirsItem(from_target='t', into_dir='x', path_to_make='y/z'),
            {ProvidesDirectory(path='x/y'), ProvidesDirectory(path='x/y/z')},
            {require_directory('x')},
            f'make-dirs {DEFAULT_STAT_OPTS} --directory=x y/z',
        )

    @contextmanager
    def _temp_filesystem(self):
        'Matching Provides are generated by _temp_filesystem_provides'
        with tempfile.TemporaryDirectory() as td_path:

            def p(img_rel_path):
                return os.path.join(td_path, img_rel_path)

            os.makedirs(p('a/b/c'))
            os.makedirs(p('a/d'))

            for filepath in ['a/E', 'a/d/F', 'a/b/c/G']:
                with open(p(filepath), 'w') as f:
                    f.write('Hello, ' + filepath)

            yield td_path

    def _temp_filesystem_provides(self, p=''):
        'Captures what is provided by _temp_filesystem, if installed at `p` '
        'inside the image.'
        return {
            ProvidesDirectory(path=f'{p}/a'),
            ProvidesDirectory(path=f'{p}/a/b'),
            ProvidesDirectory(path=f'{p}/a/b/c'),
            ProvidesDirectory(path=f'{p}/a/d'),
            ProvidesFile(path=f'{p}/a/E'),
            ProvidesFile(path=f'{p}/a/d/F'),
            ProvidesFile(path=f'{p}/a/b/c/G'),
        }

    def test_tarball(self):
        with self._temp_filesystem() as fs_path:
            fs_prefix = fs_path.lstrip('/')

            def strip_fs_prefix(tarinfo):
                if tarinfo.path.startswith(fs_prefix + '/'):
                    tarinfo.path = tarinfo.path[len(fs_prefix) + 1:]
                elif fs_prefix == tarinfo.path:
                    tarinfo.path = '.'
                else:
                    raise AssertionError(
                        f'{tarinfo.path} must start with {fs_prefix}'
                    )
                return tarinfo

            with tempfile.NamedTemporaryFile() as t:
                with tarfile.TarFile(t.name, 'w') as tar_obj:
                    tar_obj.add(fs_path, filter=strip_fs_prefix)

                self._check_item(
                    TarballItem(from_target='t', into_dir='y', tarball=t.name),
                    self._temp_filesystem_provides('y'),
                    {require_directory('y')},
                    f'tar --directory=y {t.name}',
                )

    def test_parent_layer(self):
        with self._temp_filesystem() as parent_path:
            self._check_item(
                ParentLayerItem(from_target='t', path=parent_path),
                self._temp_filesystem_provides() | {
                    ProvidesDirectory(path='/'),
                },
                set(),
                f'--base-layer-path {parent_path}',
            )

    def test_stat_options(self):
        self._check_item(
            MakeDirsItem(
                from_target='t',
                into_dir='x',
                path_to_make='y/z',
                mode='0733',
                user='cat',
                group='dog',
            ),
            {ProvidesDirectory(path='x/y'), ProvidesDirectory(path='x/y/z')},
            {require_directory('x')},
            f'make-dirs --user=cat --group=dog --mode=0733 --directory=x y/z',
        )
